---
// Define the navigation items
const navItems = [
  { text: "Home", href: "/" },
  { text: "About Us", href: "/about-us" },
  { 
    text: "Services", 
    href: "/services",
    hasDropdown: true,
    dropdownItems: [
      { text: "General Labour & Handymen", href: "/services" },
      { text: "Drywall Repair & Installation", href: "/services" },
      { text: "Professional Painting", href: "/services" },
      { text: "Demolition & Removal Services", href: "/services" },
      { text: "Comercial & Residential Cleaning", href: "/services" },
      { text: "Post-Construction Clean Up", href: "/services" },
      { text: "Water Damage Mitigation", href: "/services" },
      { text: "Fire & Smoke Restoration", href: "/services" },
      { text: "Packing, Storage & Moving", href: "/services" },
    ]
  },
  { text: "Contact", href: "/contact" },
];

// Get the current URL path to highlight the active link
const currentPath = Astro.url.pathname;
---

<!-- Desktop Navigation -->
<nav class="hidden lg:block">
  <ul class="flex items-center space-x-6">
    {
      navItems.map((item) => {
        const isActive = currentPath === item.href || 
                         (item.href !== "/" && currentPath.startsWith(item.href)) ||
                         (item.hasDropdown && item.dropdownItems?.some(subItem => 
                           currentPath === subItem.href || 
                           (subItem.href !== "/" && currentPath.startsWith(subItem.href))
                         ));
        
        if (item.hasDropdown) {
          return (
            <li class="relative group">
              <button
                class={`text-lg font-medium transition-colors flex items-center ${
                  isActive ? "text-orange-600" : "text-black"
                }`}
                aria-expanded="false"
                aria-haspopup="true"
              >
                {item.text}
                <svg class="ml-1 h-5 w-5 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              <!-- Dropdown Menu -->
              <div class="absolute top-full left-0 mt-1 w-60 bg-white shadow-xl border-t-4 border-orange-600 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                <div class="py-2">
                  {item.dropdownItems?.map((subItem) => {
                    const isSubActive = currentPath === subItem.href || 
                                       (subItem.href !== "/" && currentPath.startsWith(subItem.href));
                    return (
                      <a
                        href={subItem.href}
                        class={`block px-8 py-2 text-lg transition-colors ${
                          isSubActive 
                            ? " text-orange-600 font-medium" 
                            : "text-black hover:text-orange-600"
                        }`}
                      >
                        {subItem.text}
                      </a>
                    );
                  })}
                </div>
              </div>
            </li>
          );
        } else {
          return (
            <li>
              <a
                href={item.href}
                class={`text-lg font-medium transition-colors ${
                  isActive ? "text-orange-600" : "text-black"
                }`}
                aria-current={isActive ? "page" : undefined}
              >
                {item.text}
              </a>
            </li>
          );
        }
      })
    }
  </ul>
</nav>

<!-- Mobile Menu Button -->
<button
  id="mobile-menu-button"
  class="lg:hidden p-2 text-black hover:text-orange-600 focus:outline-none transition-colors relative"
  aria-label="Toggle Menu"
  aria-expanded="false"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
  </svg>
</button>

<!-- Mobile Menu Dropdown - Enhanced with Functional Dropdowns -->
<div
  id="mobile-menu"
  class="absolute top-full left-0 right-0 bg-white shadow-lg border-t border-gray-100 transform scale-y-0 origin-top transition-transform duration-200 ease-out lg:hidden z-50"
  role="menu"
  aria-labelledby="mobile-menu-button"
>
  <!-- Navigation Links with Functional Dropdowns -->
  <div class="px-4 py-6">
    <div class="space-y-2">
      {
        navItems.map((item, index) => {
          if (item.hasDropdown) {
            const isDropdownActive = item.dropdownItems?.some(subItem => 
              currentPath === subItem.href || 
              (subItem.href !== "/" && currentPath.startsWith(subItem.href))
            );
            
            return (
              <div class="mobile-dropdown">
                <button
                  class={`w-full flex items-center justify-center px-4 py-3 text-sm font-medium transition-colors ${
                    isDropdownActive 
                      ? "text-white bg-orange-500" 
                      : "text-black hover:text-orange-600"
                  }`}
                  data-dropdown-trigger={`mobile-dropdown-${index}`}
                  aria-expanded="false"
                  aria-haspopup="true"
                >
                  <span>{item.text}</span>
                  <svg 
                    class="h-5 w-5 transition-transform ml-2 duration-200" 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                    data-dropdown-icon={`mobile-dropdown-${index}`}
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                
                <!-- Mobile Dropdown Content -->
                <div
                  class="mobile-dropdown-content overflow-hidden transition-all duration-300 ease-out"
                  data-dropdown-content={`mobile-dropdown-${index}`}
                  style="max-height: 0;"
                >
                  <div class="pt-2 pb-1 space-y-1">
                    {item.dropdownItems?.map((subItem) => {
                      const isSubActive = currentPath === subItem.href || 
                                         (subItem.href !== "/" && currentPath.startsWith(subItem.href));
                      return (
                        <a
                          href={subItem.href}
                          class={`block px-8 py-2 text-sm transition-colors ml-4 ${
                            isSubActive 
                              ? "bg-orange-500 text-white font-medium" 
                              : "text-black hover:text-orange-600"
                          }`}
                          role="menuitem"
                          aria-current={isSubActive ? "page" : undefined}
                        >
                          {subItem.text}
                        </a>
                      );
                    })}
                  </div>
                </div>
              </div>
            );
          } else {
            const isActive = currentPath === item.href || 
                           (item.href !== "/" && currentPath.startsWith(item.href));
            
            return (
              <a
                href={item.href}
                class={`block px-4 py-3 text-sm font-medium transition-colors text-center ${
                  isActive 
                    ? "text-white bg-orange-500" 
                    : "text-black hover:text-orange-600"
                }`}
                role="menuitem"
                aria-current={isActive ? "page" : undefined}
              >
                {item.text}
              </a>
            );
          }
        })
      }
    </div>
  </div>
</div>

<style>
  /* Mobile menu button animation */
  #mobile-menu-button:hover svg {
    transform: scale(1.1);
  }
  
  #mobile-menu-button svg {
    transition: transform 0.2s ease;
  }
  
  /* Mobile menu show/hide states */
  #mobile-menu.show {
    transform: scaleY(1);
  }
  
  /* Smooth hover effects */
  #mobile-menu a {
    transition: all 0.15s ease;
  }
  
  /* Active state styling */
  #mobile-menu a[aria-current="page"] {
    font-weight: 600;
  }
  
  /* Desktop dropdown hover effects */
  .group:hover .group-hover\:rotate-180 {
    transform: rotate(180deg);
  }
  
  /* Mobile dropdown animations */
  .mobile-dropdown-content {
    transition: max-height 0.3s ease-out, opacity 0.2s ease-out;
  }
  
  .mobile-dropdown-content.expanded {
    opacity: 1;
  }
  
  .mobile-dropdown-content:not(.expanded) {
    opacity: 0;
  }
  
  /* Mobile dropdown icon rotation */
  .mobile-dropdown [data-dropdown-icon].rotated {
    transform: rotate(180deg);
  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (!mobileMenuButton || !mobileMenu) return;
    
    let isMenuOpen = false;
    
    // Function to toggle mobile menu
    const toggleMobileMenu = () => {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        // Show menu
        mobileMenu.classList.add('show');
        mobileMenuButton.setAttribute('aria-expanded', 'true');
      } else {
        // Hide menu
        mobileMenu.classList.remove('show');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
        
        // Close all dropdowns when closing main menu
        closeAllDropdowns();
      }
    };
    
    // Function to close all mobile dropdowns
    const closeAllDropdowns = () => {
      const dropdownContents = mobileMenu.querySelectorAll('.mobile-dropdown-content');
      const dropdownTriggers = mobileMenu.querySelectorAll('[data-dropdown-trigger]');
      const dropdownIcons = mobileMenu.querySelectorAll('[data-dropdown-icon]');
      
      dropdownContents.forEach(content => {
        (content as HTMLElement).style.maxHeight = '0';
        content.classList.remove('expanded');
      });
      
      dropdownTriggers.forEach(trigger => {
        trigger.setAttribute('aria-expanded', 'false');
      });
      
      dropdownIcons.forEach(icon => {
        icon.classList.remove('rotated');
      });
    };
    
    // Mobile dropdown functionality
    const setupMobileDropdowns = () => {
      const dropdownTriggers = mobileMenu.querySelectorAll('[data-dropdown-trigger]');
      
      dropdownTriggers.forEach(trigger => {
        trigger.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const targetId = trigger.getAttribute('data-dropdown-trigger');
          const content = mobileMenu.querySelector(`[data-dropdown-content="${targetId}"]`);
          const icon = mobileMenu.querySelector(`[data-dropdown-icon="${targetId}"]`);
          
          if (!content || !icon) return;
          
          const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
          
          if (isExpanded) {
            // Close dropdown
            (content as HTMLElement).style.maxHeight = '0';
            content.classList.remove('expanded');
            trigger.setAttribute('aria-expanded', 'false');
            icon.classList.remove('rotated');
          } else {
            // Close other dropdowns first
            closeAllDropdowns();
            
            // Open this dropdown
            content.classList.add('expanded');
            (content as HTMLElement).style.maxHeight = (content as HTMLElement).scrollHeight + 'px';
            trigger.setAttribute('aria-expanded', 'true');
            icon.classList.add('rotated');
          }
        });
      });
    };
    
    // Initialize mobile dropdowns
    setupMobileDropdowns();
    
    // Event listeners for main menu
    mobileMenuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target as Node;
      if (isMenuOpen && !mobileMenu.contains(target) && !mobileMenuButton.contains(target)) {
        toggleMobileMenu();
      }
    });
    
    // Close menu when clicking a navigation link (but not dropdown triggers)
    const navLinks = mobileMenu.querySelectorAll('a[href^="/"]');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (isMenuOpen) {
          setTimeout(() => toggleMobileMenu(), 100);
        }
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        toggleMobileMenu();
      }
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 1024 && isMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>